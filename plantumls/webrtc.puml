@startuml WebRTC_AV_Trans
 
hide footbox
skinparam {
    ' defaultFontName Abyssinica SIL
    Shadowing false  
    backgroundColor white
    NoteFontColor #Black
    NoteFontSize 16
    NoteTextAlignment left
    NoteBackgroundColor WhiteSmoke
    NoteColor transparent
    NoteBorderThickness 0
    NoteBorderColor transparent
    NoteBorderThickness 0
    NoteShadowing false
    ParticipantPadding 0
    BoxPadding 20
    dpi 96
    ClassBackgroundColor transparent
    ClassHeaderBackgroundColor lightgreen
    ClassStereotypeFontColor transparent
    SequenceBoxBordercolor sienna
    SequenceBoxFontSize 24
    SequenceBoxFontColor Black
    SequenceBoxBackgroundColor WhiteSmoke
    SequenceLifeLineBackgroundColor WhiteSmoke
    SequenceMessageAlignment center
    SequenceGroupHeaderFontColor White
    SequenceGroupHeaderFontSize 20
    SequenceGroupBackgroundColor DarkOliveGreen
    SequenceGroupBodyBackgroundColor transparent
    SequenceGroupBorderThickness 4
    SequenceGroupBorderColor DarkOliveGreen
    ' transparent
    sequence {
        ParticipantBackgroundColor WhiteSmoke
        ParticipantBorderColor Gray
        ParticipantFontStyle Bold
        ParticipantFontSize 12
        ParticipantPadding 0
 
        LifeLineBorderColor DimGray
        ArrowColor Black
        ArrowThickness 0.8
        ColorArrowSeparationSpace 30
    }
}

box AudioSink
participant "AudioTrackJni" as AudioTrackJni
participant "AudioDeviceBuffer" as RAudioDeviceBuffer
end box

box VideoSink
participant SurfaceViewRenderer
participant ProxyVideoSink
participant VideoSinkWrapper
end box

box AudioCapture
participant "AudioRecordJni" as AudioRecordJni
participant "AudioDeviceBuffer" as AudioDeviceBuffer
participant "[AudioProcessing]\nAudioProcessingImpl" as AudioProcessingImpl
participant "[GainControl]\nGainControlImpl" as GainControlImpl
end box

box VideoCapture
participant "CameraSession.Events" as Events
participant "[CameraCapturer]\nCamera2Capturer" as Camera2Capturer
participant "[MediaSource]\nVideoSource" as VideoSource
participant "[AdaptedVideoTrackSource]\nAndroidVideoTrackSource" as AndroidVideoTrackSource
participant "[VideoSourceBase]\nVideoBroadcaster" as VideoBroadcaster
end box

box AudioEncoder
participant "[AudioTransport]\nAudioTransportImpl" as AudioTransportImpl
participant "[AudioSender]\nAudioSendStream" as AudioSendStream
participant "[AudioCodingModule]\nAudioCodingModuleImpl" as AudioCodingModuleImpl
participant "[AudioEncoder]\nAudioEncoderCng" as AudioEncoderCng
end box

box VideoEncoder
participant "VideoEncoder.Callback" as VideoEncoderCallback
participant "HardwareVideoEncoder" as HardwareVideoEncoder
participant "VideoEncoderWrapper" as VideoEncoderWrapper
participant VideoBroadcaster
end box

box AudioDecoder
participant "AudioDecoderIsacT<IsacFloat>" as AudioDecoderIsacT
participant NetEq
end box

box VideoDecoder
participant "VideoBroadcaster" as RVideoBroadcaster
participant WebRtcVideoReceiveStream
participant IncomingVideoStream
participant VideoStreamDecoder
participant VCMDecodedFrameCallback
participant "VideoDecoder.Callback" as VideoDecoderCallback
participant AndroidVideoDecoder
participant VideoDecoderWrapper
participant VideoDecoderSoftwareFallbackWrapper
participant VCMGenericDecoder
end box

box AudioSender
participant "[ChannelSendInterface]\nChannelSend" as ChannelSend
participant "RTPSenderAudio" as RTPSenderAudio
end box

box VideoSender
participant "[EncodedImageCallback]\nVideoStreamEncoder" as VideoStreamEncoder
participant "[EncoderSink]VideoSendStreamImpl" as VideoSendStreamImpl
participant "[RtpVideoSenderInterface]\nRtpVideoSender" as RtpVideoSender
participant "[ProcessThread]\nProcessThreadImpl" as ProcessThreadImpl
end box

box AudioReceiver
participant AcmReceiver
participant ChannelReceive
participant "[AudioMixer::Source]\nAudioReceiveStream" as AudioReceiveStream
participant AudioMixerImpl
end box

box VideoReceiver
participant VideoReceiver2
participant VideoReceiveStream
participant FrameBuffer
end box

box RTPSender
participant "RTPSender" as RTPSender
participant "[RtpPacketSender]\nRtpPacketSenderProxy" as RtpPacketSenderProxy
participant "PacedSender" as PacedSender
participant "PacketRouter" as PacketRouter
participant "[RtpRtcp]\nModuleRtpRtcpImpl" as ModuleRtpRtcpImpl
participant "[RtpRtcp]\nRtpSenderEgress" as RtpSenderEgress
end box

box RTPReceiver
participant "RtpVideoStreamReceiver" as RtpVideoStreamReceiver
participant "RtpDemuxer" as RtpDemuxer
participant "RtpStreamReceiverController" as RtpStreamReceiverController
participant "[webrtc::Call]\ninternal::Call" as Call
end box

box Tranceiver
participant "[Transport]\n[MediaChannel]\nWebRtcVideoChannel" as WebRtcVideoChannel
participant "[NetworkInterface]\n[BaseChannel]\nVideoChannel" as VideoChannel
participant "[RtpTransportInternal]\n[RtpTransport]\n[SrtpTransport]\nDtlsSrtpTransport" as DtlsSrtpTransport
end box

box DTLS
participant "webrtc::DtlsTransport" as DtlsTransport
participant "[PacketTransportInternal]\nP2PTransportChannel" as P2PTransportChannel
participant "ProxyConnection" as ProxyConnection
participant "UDPPort" as UDPPort
participant "AllocationSequence" as AllocationSequence
participant "AsyncUDPSocket" as AsyncUDPSocket
participant "PhysicalSocket" as PhysicalSocket

end box

=== THREAD ==

PacedSender->PacedSender:Process()
activate PacedSender
note over PacedSender:**WAITING Packet...**

ProcessThreadImpl->ProcessThreadImpl:Process()
activate ProcessThreadImpl
note over ProcessThreadImpl:**WAITING Packet...**

VideoReceiveStream->VideoReceiveStream:Start()
activate VideoReceiveStream
note over VideoReceiveStream:**WAITING Packet..**

=== Video Send ==

->Events:onFrameCaptured()
create Camera2Capturer
Events->Camera2Capturer:createCameraSession()
create VideoSource
Camera2Capturer->VideoSource:onFrameCaptured()
create AndroidVideoTrackSource
VideoSource->AndroidVideoTrackSource:OnFrameCaptured()
create VideoBroadcaster
AndroidVideoTrackSource->VideoBroadcaster:OnFrame()
create VideoStreamEncoder
VideoBroadcaster->VideoStreamEncoder:OnFrame()
create VideoEncoderWrapper
VideoStreamEncoder->VideoEncoderWrapper:Encode()
create HardwareVideoEncoder
VideoEncoderWrapper->HardwareVideoEncoder:encode()
create VideoEncoderCallback
HardwareVideoEncoder->VideoEncoderCallback:onEncodedFrame()
VideoEncoderCallback->VideoEncoderWrapper:OnEncodedFrame()
VideoEncoderWrapper->VideoStreamEncoder:OnEncodedImage()
create VideoSendStreamImpl
VideoStreamEncoder->VideoSendStreamImpl:OnEncodedImage()
VideoSendStreamImpl->RtpVideoSender:OnEncodedImage()

RtpVideoSender-->ProcessThreadImpl:**POST SIGNAL**

note over ProcessThreadImpl:**RESUME**
create ModuleRtpRtcpImpl
ProcessThreadImpl->ModuleRtpRtcpImpl:OnSendingRtpFrame()
deactivate ProcessThreadImpl
activate ModuleRtpRtcpImpl
ModuleRtpRtcpImpl->ModuleRtpRtcpImpl:TrySendPacket()
activate ModuleRtpRtcpImpl
create RtpSenderEgress
ModuleRtpRtcpImpl->RtpSenderEgress:SendPacket()
deactivate ModuleRtpRtcpImpl
deactivate ModuleRtpRtcpImpl
activate RtpSenderEgress
' RtpSenderEgress->RtpSenderEgress:SendPacketToNetwork()
' activate RtpSenderEgress
' RtpSenderEgress->WebRtcVideoChannel:SendRtp()
' deactivate RtpSenderEgress
' deactivate RtpSenderEgress

=== Audio Send ==
->AudioRecordJni:DataIsRecorded()
create AudioDeviceBuffer
AudioRecordJni->AudioDeviceBuffer:DeliverRecordedData()
create AudioTransportImpl
AudioDeviceBuffer->AudioTransportImpl:RecordedDataIsAvailable()
create AudioProcessingImpl
AudioTransportImpl->AudioProcessingImpl:ProcessStream()
activate AudioProcessingImpl
AudioProcessingImpl->AudioProcessingImpl:ProcessCaptureStreamLocked()
activate AudioProcessingImpl
create GainControlImpl
AudioProcessingImpl->GainControlImpl:ProcessCaptureAudio()
deactivate AudioProcessingImpl
deactivate AudioProcessingImpl
GainControlImpl->AudioTransportImpl:AudioTransportImpl()
create AudioSendStream
AudioTransportImpl->AudioSendStream:SendAudioData()
create ChannelSend
AudioSendStream->ChannelSend:ProcessAndEncodeAudio()
create AudioCodingModuleImpl
ChannelSend->AudioCodingModuleImpl:Add10MsData()
activate AudioCodingModuleImpl
AudioCodingModuleImpl->AudioCodingModuleImpl:Encode()
activate AudioCodingModuleImpl
create AudioEncoderCng
AudioCodingModuleImpl->AudioEncoderCng:Encode()
deactivate AudioCodingModuleImpl
deactivate AudioCodingModuleImpl
AudioEncoderCng->ChannelSend:SendData()
activate ChannelSend
ChannelSend->ChannelSend:SendRtpAudio()
activate ChannelSend

create RTPSenderAudio
ChannelSend->RTPSenderAudio:SendAudio()
deactivate ChannelSend
deactivate ChannelSend
create RTPSender
RTPSenderAudio->RTPSender:SendToNetwork()
create RtpPacketSenderProxy
RTPSender->RtpPacketSenderProxy:EnqueuePackets()
RtpPacketSenderProxy->PacedSender:EnqueuePackets()

note over PacedSender:**RESUME**
PacedSender->PacedSender:ProcessPackets()
activate PacedSender
PacedSender->PacedSender:SendRtpPacket()
activate PacedSender
create PacketRouter
PacedSender->PacketRouter:SendPacket()
deactivate PacedSender
deactivate PacedSender
deactivate PacedSender


PacketRouter->ModuleRtpRtcpImpl:TrySendPacket()
activate ModuleRtpRtcpImpl
ModuleRtpRtcpImpl->RtpSenderEgress:SendPacket()
deactivate ModuleRtpRtcpImpl
deactivate ModuleRtpRtcpImpl
' activate RtpSenderEgress
RtpSenderEgress->RtpSenderEgress:SendPacketToNetwork()
activate RtpSenderEgress

=== Send RTP ===

create WebRtcVideoChannel
RtpSenderEgress->WebRtcVideoChannel:SendRtp()
deactivate RtpSenderEgress
deactivate RtpSenderEgress

' ModuleRtpRtcpImpl->WebRtcVideoChannel:SendRtp()
activate WebRtcVideoChannel
WebRtcVideoChannel->WebRtcVideoChannel:MediaChannel::SendRtp()
activate WebRtcVideoChannel
WebRtcVideoChannel->WebRtcVideoChannel:MediaChannel::DoSendPacket()
activate WebRtcVideoChannel
create VideoChannel
WebRtcVideoChannel->VideoChannel:SendPacket()
deactivate WebRtcVideoChannel
deactivate WebRtcVideoChannel
deactivate WebRtcVideoChannel

create DtlsSrtpTransport
VideoChannel->DtlsSrtpTransport:SendRtpPacket()
create DtlsTransport
DtlsSrtpTransport->DtlsTransport:SendPacket()
create P2PTransportChannel
DtlsTransport->P2PTransportChannel:SendPacket()
create ProxyConnection
P2PTransportChannel->ProxyConnection:Send()
create UDPPort
ProxyConnection->UDPPort:SendTo()
create AsyncUDPSocket
UDPPort->AsyncUDPSocket:SendTo()
create PhysicalSocket
AsyncUDPSocket->PhysicalSocket:SendTo()
activate PhysicalSocket
PhysicalSocket->PhysicalSocket:DoSendTo()
activate PhysicalSocket
PhysicalSocket->:::sendto()
activate PhysicalSocket
deactivate PhysicalSocket
deactivate PhysicalSocket
deactivate PhysicalSocket

=== Receive RTP ===

AsyncUDPSocket<-:OnReadEvent()
activate AsyncUDPSocket
AsyncUDPSocket->PhysicalSocket:RecvFrom()
activate PhysicalSocket
PhysicalSocket->PhysicalSocket:::recvfrom()
activate PhysicalSocket
deactivate PhysicalSocket
deactivate PhysicalSocket

create AllocationSequence
AsyncUDPSocket-->AllocationSequence:OnReadEvent()
note left:**SignalReadEvent**
deactivate AsyncUDPSocket
AllocationSequence->UDPPort:HandleIncomingPacket()
UDPPort->ProxyConnection:OnReadPacket()
ProxyConnection->P2PTransportChannel:OnReadPacket()
P2PTransportChannel->DtlsTransport:OnReadPacket()
DtlsTransport->DtlsSrtpTransport:RtpTransport::OnReadPacket()
activate DtlsSrtpTransport
DtlsSrtpTransport->DtlsSrtpTransport:SrtpTransport::OnRtcpPacketReceived()
activate DtlsSrtpTransport
create RtpDemuxer
DtlsSrtpTransport->RtpDemuxer:OnRtpPacket()
deactivate DtlsSrtpTransport
deactivate DtlsSrtpTransport
activate RtpDemuxer

=== Receive Video ==
RtpDemuxer->VideoChannel:OnRtpPacket()
VideoChannel->WebRtcVideoChannel:OnPacketReceived()
create Call
WebRtcVideoChannel->Call:DeliverPacket()
create RtpStreamReceiverController
Call->RtpStreamReceiverController:OnRtpPacket()
RtpStreamReceiverController->RtpDemuxer:OnRtpPacket()
' activate RtpDemuxer
create RtpVideoStreamReceiver
RtpDemuxer->RtpVideoStreamReceiver:OnRtpPacket()
deactivate RtpDemuxer
activate RtpVideoStreamReceiver
RtpVideoStreamReceiver->RtpVideoStreamReceiver:ReceivePacket()
activate RtpVideoStreamReceiver
RtpVideoStreamReceiver->RtpVideoStreamReceiver:OnReceivedPayloadData()
activate RtpVideoStreamReceiver
RtpVideoStreamReceiver->RtpVideoStreamReceiver:OnAssembledFrame()
activate RtpVideoStreamReceiver
RtpVideoStreamReceiver->RtpVideoStreamReceiver:OnInsertedPacket()
activate RtpVideoStreamReceiver
RtpVideoStreamReceiver->VideoReceiveStream:OnCompleteFrame()
deactivate RtpVideoStreamReceiver
deactivate RtpVideoStreamReceiver
deactivate RtpVideoStreamReceiver
deactivate RtpVideoStreamReceiver
deactivate RtpVideoStreamReceiver
create FrameBuffer
VideoReceiveStream->FrameBuffer:InsertFrame()

note over VideoReceiveStream:**RESUME**
->VideoReceiveStream:StartNextDecode()
activate VideoReceiveStream
VideoReceiveStream->VideoReceiveStream:HandleEncodedFrame()
activate VideoReceiveStream
create VideoReceiver2
VideoReceiveStream->VideoReceiver2:Decode()
deactivate VideoReceiveStream
deactivate VideoReceiveStream
deactivate VideoReceiveStream

create VCMGenericDecoder
VideoReceiver2->VCMGenericDecoder:Decode()
create VideoDecoderSoftwareFallbackWrapper
VCMGenericDecoder->VideoDecoderSoftwareFallbackWrapper:Decode()
create VideoDecoderWrapper
VideoDecoderSoftwareFallbackWrapper->VideoDecoderWrapper:Decode()
create AndroidVideoDecoder
VideoDecoderWrapper->AndroidVideoDecoder:onFrame()
create VideoDecoderCallback
AndroidVideoDecoder->VideoDecoderCallback:onDecodedFrame()
VideoDecoderCallback->VideoDecoderWrapper:OnDecodedFrame()
create VCMDecodedFrameCallback
VideoDecoderWrapper->VCMDecodedFrameCallback:Decoded()
create VideoStreamDecoder
VCMDecodedFrameCallback->VideoStreamDecoder:FrameToRender()
create IncomingVideoStream
VideoStreamDecoder->IncomingVideoStream:Dequeue()
activate IncomingVideoStream
IncomingVideoStream->IncomingVideoStream:OnFrame()
activate IncomingVideoStream
IncomingVideoStream->VideoReceiveStream:OnFrame()
deactivate IncomingVideoStream
deactivate IncomingVideoStream

create WebRtcVideoReceiveStream
VideoReceiveStream->WebRtcVideoReceiveStream:OnFrame()
create RVideoBroadcaster
WebRtcVideoReceiveStream->RVideoBroadcaster:OnFrame()
create VideoSinkWrapper
RVideoBroadcaster->VideoSinkWrapper:OnFrame()
create ProxyVideoSink
VideoSinkWrapper->ProxyVideoSink:onFrame()
create SurfaceViewRenderer
ProxyVideoSink->SurfaceViewRenderer:onFrame()

=== Playback Audio ==
->AudioTrackJni:GetPlayoutData()
create RAudioDeviceBuffer
AudioTrackJni->RAudioDeviceBuffer:RequestPlayoutData()
RAudioDeviceBuffer->AudioTransportImpl:NeedMorePlayData()
AudioTransportImpl->AudioMixerImpl:Mix()
activate AudioMixerImpl
AudioMixerImpl->AudioMixerImpl:GetAudioFromSources()
activate AudioMixerImpl
AudioMixerImpl->AudioReceiveStream:GetAudioFrameWithInfo()
deactivate AudioMixerImpl
deactivate AudioMixerImpl
AudioReceiveStream->ChannelReceive:GetAudioFrameWithInfo()
ChannelReceive->AcmReceiver:GetAudio()
AcmReceiver->NetEq:GetAudio()
activate NetEq
note over NetEq:**WAITING Packet**

=== Receive Audio ==
RtpDemuxer->AudioReceiveStream:OnRtpPacket()
note over ChannelReceive:**RESUME**
AudioReceiveStream->ChannelReceive:OnRtpPacket()
activate ChannelReceive
ChannelReceive->ChannelReceive:ReceivePacket()
activate ChannelReceive
ChannelReceive->AcmReceiver:InsertPacket()
deactivate ChannelReceive
deactivate ChannelReceive
AcmReceiver->NetEq:InsertPacket()


note over NetEq:**RESUME**
NetEq->NetEq:GetAudioInternal()
activate NetEq
NetEq->NetEq:Decode()
activate NetEq
NetEq->NetEq:DecodeLoop()
activate NetEq
NetEq->AudioDecoderIsacT:Decode()
deactivate NetEq
deactivate NetEq
deactivate NetEq
deactivate NetEq
activate AudioDecoderIsacT
AudioDecoderIsacT->AudioDecoderIsacT:Decode()
activate AudioDecoderIsacT
AudioDecoderIsacT->AudioDecoderIsacT:WebRtcIsac_Decode()
activate AudioDecoderIsacT
AudioDecoderIsacT->AudioDecoderIsacT:DecodeInternal()
activate AudioDecoderIsacT
AudioDecoderIsacT-->NetEq:RET
deactivate AudioDecoderIsacT
deactivate AudioDecoderIsacT
deactivate AudioDecoderIsacT
deactivate AudioDecoderIsacT

' === REFERENCES ==
' AudioDeviceBuffer-->o AudioRecordJni:audio_device_buffer_
' AudioTransportImpl-->o AudioDeviceBuffer:audio_transport_cb_
' AudioProcessingImpl-->o AudioTransportImpl:audio_processing_
' GainControlImpl-->o AudioProcessingImpl:submodules_.gain_control
' AudioSender-->o AudioTransportImpl:audio_senders_
' ChannelSend-->o AudioSender:channel_send_
' AudioCodingModuleImpl-->o ChannelSend:audio_coding_
' AudioEncoderCng-->o AudioCodingModuleImpl:encoder_stack_
' RTPSenderAudio-->o ChannelSend:rtp_sender_audio_
' RTPSender-->o RTPSenderAudio:rtp_sender_

@enduml