@startuml WebRTC_Audio_Send
 
hide footbox
skinparam {
    ' defaultFontName Abyssinica SIL
    Shadowing false  
    backgroundColor white
    NoteFontColor #Black
    NoteFontSize 16
    NoteTextAlignment left
    NoteBackgroundColor WhiteSmoke
    NoteColor transparent
    NoteBorderThickness 0
    NoteBorderColor transparent
    NoteBorderThickness 0
    NoteShadowing false
    ParticipantPadding 0
    BoxPadding 20
    dpi 96
    ClassBackgroundColor transparent
    ClassHeaderBackgroundColor lightgreen
    ClassStereotypeFontColor transparent
    SequenceBoxBordercolor sienna
    SequenceBoxFontSize 24
    SequenceBoxFontColor Black
    SequenceBoxBackgroundColor WhiteSmoke
    SequenceLifeLineBackgroundColor WhiteSmoke
    SequenceMessageAlignment center
    SequenceGroupHeaderFontColor White
    SequenceGroupHeaderFontSize 20
    SequenceGroupBackgroundColor DarkOliveGreen
    SequenceGroupBodyBackgroundColor transparent
    SequenceGroupBorderThickness 4
    SequenceGroupBorderColor DarkOliveGreen
    ' transparent
    sequence {
        ParticipantBackgroundColor WhiteSmoke
        ParticipantBorderColor Gray
        ParticipantFontStyle Bold
        ParticipantFontSize 12
        ParticipantPadding 0
 
        LifeLineBorderColor DimGray
        ArrowColor Black
        ArrowThickness 0.8
        ColorArrowSeparationSpace 30
    }
}

box AudioCapture
participant "AudioRecordJni" as AudioRecordJni
participant "AudioDeviceBuffer" as AudioDeviceBuffer
participant "[AudioProcessing]\nAudioProcessingImpl" as AudioProcessingImpl
participant "[GainControl]\nGainControlImpl" as GainControlImpl
end box

box AudioEncoder
participant "[AudioTransport]\nAudioTransportImpl" as AudioTransportImpl
participant "[AudioSender]\nAudioSendStream" as AudioSendStream
participant "[AudioCodingModule]\nAudioCodingModuleImpl" as AudioCodingModuleImpl
participant "[AudioEncoder]\nAudioEncoderCng" as AudioEncoderCng
end box

box AudioSender
participant "[ChannelSendInterface]\nChannelSend" as ChannelSend
participant "RTPSenderAudio" as RTPSenderAudio
end box

box RTPSender
participant "RTPSender" as RTPSender
participant "[RtpPacketSender]\nRtpPacketSenderProxy" as RtpPacketSenderProxy
participant "PacedSender" as PacedSender
participant "PacketRouter" as PacketRouter
participant "[RtpRtcp]\nModuleRtpRtcpImpl" as ModuleRtpRtcpImpl
participant "[RtpRtcp]\nRtpSenderEgress" as RtpSenderEgress
end box

box Tranceiver
participant "[Transport]\n[MediaChannel]\nWebRtcVideoChannel" as WebRtcVideoChannel
participant "[NetworkInterface]\n[BaseChannel]\nVideoChannel" as VideoChannel
participant "[RtpTransportInternal]\n[RtpTransport]\n[SrtpTransport]\nDtlsSrtpTransport" as DtlsSrtpTransport
end box

box DTLS
participant "webrtc::DtlsTransport" as DtlsTransport
participant "[PacketTransportInternal]\nP2PTransportChannel" as P2PTransportChannel
participant "ProxyConnection" as ProxyConnection
participant "UDPPort" as UDPPort
participant "AllocationSequence" as AllocationSequence
participant "AsyncUDPSocket" as AsyncUDPSocket
participant "PhysicalSocket" as PhysicalSocket

end box

=== THREAD ==

PacedSender->PacedSender:Process()
activate PacedSender
note over PacedSender:**WAITING Packet...**

ProcessThreadImpl->ProcessThreadImpl:Process()
activate ProcessThreadImpl
note over ProcessThreadImpl:**WAITING Packet...**

VideoReceiveStream->VideoReceiveStream:Start()
activate VideoReceiveStream
note over VideoReceiveStream:**WAITING Packet..**


=== Audio Send ==
->AudioRecordJni:DataIsRecorded()
create AudioDeviceBuffer
AudioRecordJni->AudioDeviceBuffer:DeliverRecordedData()
create AudioTransportImpl
AudioDeviceBuffer->AudioTransportImpl:RecordedDataIsAvailable()
create AudioProcessingImpl
AudioTransportImpl->AudioProcessingImpl:ProcessStream()
activate AudioProcessingImpl
AudioProcessingImpl->AudioProcessingImpl:ProcessCaptureStreamLocked()
activate AudioProcessingImpl
create GainControlImpl
AudioProcessingImpl->GainControlImpl:ProcessCaptureAudio()
deactivate AudioProcessingImpl
deactivate AudioProcessingImpl
GainControlImpl->AudioTransportImpl:AudioTransportImpl()
create AudioSendStream
AudioTransportImpl->AudioSendStream:SendAudioData()
create ChannelSend
AudioSendStream->ChannelSend:ProcessAndEncodeAudio()
create AudioCodingModuleImpl
ChannelSend->AudioCodingModuleImpl:Add10MsData()
activate AudioCodingModuleImpl
AudioCodingModuleImpl->AudioCodingModuleImpl:Encode()
activate AudioCodingModuleImpl
create AudioEncoderCng
AudioCodingModuleImpl->AudioEncoderCng:Encode()
deactivate AudioCodingModuleImpl
deactivate AudioCodingModuleImpl
AudioEncoderCng->ChannelSend:SendData()
activate ChannelSend
ChannelSend->ChannelSend:SendRtpAudio()
activate ChannelSend

create RTPSenderAudio
ChannelSend->RTPSenderAudio:SendAudio()
deactivate ChannelSend
deactivate ChannelSend
create RTPSender
RTPSenderAudio->RTPSender:SendToNetwork()
create RtpPacketSenderProxy
RTPSender->RtpPacketSenderProxy:EnqueuePackets()
RtpPacketSenderProxy->PacedSender:EnqueuePackets()

note over PacedSender:**RESUME**
PacedSender->PacedSender:ProcessPackets()
activate PacedSender
PacedSender->PacedSender:SendRtpPacket()
activate PacedSender
create PacketRouter
PacedSender->PacketRouter:SendPacket()
deactivate PacedSender
deactivate PacedSender
deactivate PacedSender


PacketRouter->ModuleRtpRtcpImpl:TrySendPacket()
activate ModuleRtpRtcpImpl
ModuleRtpRtcpImpl->RtpSenderEgress:SendPacket()
deactivate ModuleRtpRtcpImpl
deactivate ModuleRtpRtcpImpl
' activate RtpSenderEgress
RtpSenderEgress->RtpSenderEgress:SendPacketToNetwork()
activate RtpSenderEgress

=== Send RTP ===

create WebRtcVideoChannel
RtpSenderEgress->WebRtcVideoChannel:SendRtp()
deactivate RtpSenderEgress
deactivate RtpSenderEgress

' ModuleRtpRtcpImpl->WebRtcVideoChannel:SendRtp()
activate WebRtcVideoChannel
WebRtcVideoChannel->WebRtcVideoChannel:MediaChannel::SendRtp()
activate WebRtcVideoChannel
WebRtcVideoChannel->WebRtcVideoChannel:MediaChannel::DoSendPacket()
activate WebRtcVideoChannel
create VideoChannel
WebRtcVideoChannel->VideoChannel:SendPacket()
deactivate WebRtcVideoChannel
deactivate WebRtcVideoChannel
deactivate WebRtcVideoChannel

create DtlsSrtpTransport
VideoChannel->DtlsSrtpTransport:SendRtpPacket()
create DtlsTransport
DtlsSrtpTransport->DtlsTransport:SendPacket()
create P2PTransportChannel
DtlsTransport->P2PTransportChannel:SendPacket()
create ProxyConnection
P2PTransportChannel->ProxyConnection:Send()
create UDPPort
ProxyConnection->UDPPort:SendTo()
create AsyncUDPSocket
UDPPort->AsyncUDPSocket:SendTo()
create PhysicalSocket
AsyncUDPSocket->PhysicalSocket:SendTo()
activate PhysicalSocket
PhysicalSocket->PhysicalSocket:DoSendTo()
activate PhysicalSocket
PhysicalSocket->:::sendto()
activate PhysicalSocket
deactivate PhysicalSocket
deactivate PhysicalSocket
deactivate PhysicalSocket

@enduml